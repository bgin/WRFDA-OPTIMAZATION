
! ======================================================================================
! This file was generated by the version 4.3.6 of ADG on 06/26/2010. The Adjoint Code
! Generator (ADG) was developed and sponsored by LASG of IAP (1999-2010)
! The Copyright of the ADG system was declared by Walls at LASG, 1999-2010
! ======================================================================================

MODULE a_module_small_step_em

   USE module_model_constants
   USE module_configure

CONTAINS

   SUBROUTINE a_small_step_prep(u_1,a_u_1,u_2,a_u_2,v_1,a_v_1,v_2,a_v_2, &
   w_1,a_w_1,w_2,a_w_2,t_1,a_t_1,t_2,a_t_2,ph_1,a_ph_1,ph_2,a_ph_2, &
   mub,mu_1,a_mu_1,mu_2,a_mu_2,muu,a_muu,muus,a_muus,muv,a_muv,muvs, &
   a_muvs,mut,a_mut,muts,a_muts,mudf,a_mudf,u_save,a_u_save,v_save, &
   a_v_save,w_save,a_w_save,t_save,a_t_save,ph_save,a_ph_save,mu_save, &
   a_mu_save,ww,a_ww,ww_save,a_ww_save,c2a,a_c2a,pb,p,a_p,alt,a_alt, &
   msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty,rdx,rdy,rk_step,ids,ide,jds,jde,kds, &
   kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   INTEGER :: rk_step
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_u_1,u_1,a_v_1,v_1,a_w_1,w_1, &
   a_t_1,t_1,a_ph_1,ph_1
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_u_save,u_save,a_v_save,v_save, &
   a_w_save,w_save,a_t_save,t_save,a_ph_save,ph_save
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_u_2,u_2,a_v_2,v_2,a_w_2,w_2, &
   a_t_2,t_2,a_ph_2,ph_2
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_c2a,c2a,a_ww_save,ww_save
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: pb,a_p,p,a_alt,alt,a_ww,ww
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mu_1,mu_1,a_mu_2,mu_2
   REAL,DIMENSION(ims:ime,jms:jme) :: mub,a_muu,muu,a_muv,muv,a_mut,mut,msfux, &
   msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty
   REAL,DIMENSION(ims:ime,jms:jme) :: a_muus,muus,a_muvs,muvs,a_muts,muts,a_mudf,mudf
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mu_save,mu_save
   REAL :: rdx,rdy,awalls
   INTEGER :: i,j,k
   INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end
   INTEGER :: i_endu,j_endv

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004


!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[0]
       i_start = its
       i_end   = min(ite,ide-1)
       j_start = jts
       j_end   = min(jte,jde-1)
       k_start = kts
       k_end = min(kte,kde-1)
       i_endu = ite
       j_endv = jte

!LPB[1]
    IF ((rk_step == 1) ) THEN
       DO j=j_start, j_end
         DO i=i_start, i_end
           muts(i,j)=mub(i,j)+mu_2(i,j)
         ENDDO

         DO i=i_start, i_endu
           muus(i,j) = muu(i,j)
         ENDDO
       ENDDO

       DO j=j_start, j_endv
       DO i=i_start, i_end
           muvs(i,j) = muv(i,j)
       ENDDO
       ENDDO

    ELSE

       DO j=j_start, j_end
         DO i=i_start, i_end
           muts(i,j)=mub(i,j)+mu_1(i,j)
         ENDDO

         DO i=i_start, i_endu
           muus(i,j)=0.5*(mub(i,j)+mu_1(i,j)+mub(i-1,j)+mu_1(i-1,j))
         ENDDO
       ENDDO

       DO j=j_start, j_endv
       DO i=i_start, i_end
         muvs(i,j)=0.5*(mub(i,j)+mu_1(i,j)+mub(i,j-1)+mu_1(i,j-1))
       ENDDO
       ENDDO

   END IF

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[8]
   DO j =j_end, j_start, -1
   DO k =kde, k_start, -1
   DO i =i_end, i_start, -1
   a_ww(i,k,j) =a_ww(i,k,j) +a_ww_save(i,k,j)
   a_ww_save(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[7]
   DO j =j_end, j_start, -1
   DO k =kde, k_start, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =a_ph_2(i,k,j)
   a_ph_1(i,k,j) =a_ph_1(i,k,j) +a_Tmpv1
   a_ph_2(i,k,j) =-a_Tmpv1+a_ph_save(i,k,j)
   a_ph_save(i,k,j) =0.0
   a_Tmpv3 =a_w_2(i,k,j)/msfty(i,j)
   a_mut(i,j) =a_mut(i,j) -w_2(i,k,j)*a_Tmpv3
   a_w_2(i,k,j) =-mut(i,j)*a_Tmpv3
   IF((rk_step ==1)) THEN
     awalls=w_2(i,k,j)
   ELSE
     awalls=w_1(i,k,j)
   END IF
   a_muts(i,j) =a_muts(i,j) +awalls*a_Tmpv3
   a_w_1(i,k,j) =a_w_1(i,k,j) +muts(i,j)*a_Tmpv3
   a_w_2(i,k,j) =a_w_2(i,k,j) +a_w_save(i,k,j)
   a_w_save(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[6]
   DO j =j_end, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_t_2(i,k,j)
   a_mut(i,j) =a_mut(i,j) -t_2(i,k,j)*a_Tmpv3
   IF((rk_step ==1)) THEN
     awalls=t_2(i,k,j)
   ELSE
     awalls=t_1(i,k,j)
   END IF
   a_muts(i,j) =a_muts(i,j) +awalls*a_Tmpv3
   a_t_1(i,k,j) =a_t_1(i,k,j) +muts(i,j)*a_Tmpv3
   a_t_2(i,k,j) =-mut(i,j)*a_Tmpv3 +a_t_save(i,k,j)
   a_t_save(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[5]
   DO j =j_endv, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =msfvx_inv(i,j)*a_v_2(i,k,j)
   a_muv(i,j) =a_muv(i,j) -v_2(i,k,j)*a_Tmpv3
   IF((rk_step ==1)) THEN
     a_muvs(i,j) =a_muvs(i,j) +v_2(i,k,j)*a_Tmpv3
   ELSE
     a_muvs(i,j) =a_muvs(i,j) +v_1(i,k,j)*a_Tmpv3
   END IF
   a_v_1(i,k,j) =a_v_1(i,k,j) +muvs(i,j)*a_Tmpv3
   a_v_2(i,k,j) =-muv(i,j)*a_Tmpv3 +a_v_save(i,k,j)
   a_v_save(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[4]
   DO j =j_end, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_endu, i_start, -1
   a_Tmpv3 =a_u_2(i,k,j)/msfuy(i,j)
   a_muu(i,j) =a_muu(i,j) -u_2(i,k,j)*a_Tmpv3
   IF((rk_step ==1)) THEN
     a_muus(i,j) =a_muus(i,j) +u_2(i,k,j)*a_Tmpv3
   ELSE
     a_muus(i,j) =a_muus(i,j) +u_1(i,k,j)*a_Tmpv3
   END IF
   a_u_1(i,k,j) =a_u_1(i,k,j) +muus(i,j)*a_Tmpv3
   a_u_2(i,k,j) =-muu(i,j)*a_Tmpv3 +a_u_save(i,k,j)
   a_u_save(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[3]
   DO j =j_start,j_end
   DO k =k_start,k_end
   DO i =i_start,i_end
   a_Tmpv1 =cpovcv*a_c2a(i,k,j)/alt(i,k,j)
   a_c2a(i,k,j) =0.0
   a_p(i,k,j) =a_p(i,k,j) +a_Tmpv1
   a_alt(i,k,j) =a_alt(i,k,j) -(pb(i,k,j) +p(i,k,j))/alt(i,k,j)*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[2]
   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
   a_ww_save(i,1,j) =0.0
   a_ww_save(i,kde,j) =0.0
   ENDDO
   ENDDO

   IF((rk_step == 1) ) THEN

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
   a_mu_2(i,j) =a_mu_save(i,j)
   ENDDO
   ENDDO
   DO j =j_endv, j_start, -1
   DO i =i_end, i_start, -1
   a_muv(i,j) =a_muv(i,j) +a_muvs(i,j)
   a_muvs(i,j) =0.0
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO i =i_endu, i_start, -1
   a_muu(i,j) =a_muu(i,j) +a_muus(i,j)
   a_muus(i,j) =0.0
   ENDDO
   DO i =i_end, i_start, -1
   a_mu_2(i,j) =a_mu_2(i,j) +a_muts(i,j)
   a_muts(i,j) =0.0
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO k =min(kde, kte), k_start, -1
   DO i =i_end, i_start, -1
   a_ph_2(i,k,j) =a_ph_2(i,k,j) +a_ph_1(i,k,j)
   a_ph_1(i,k,j) =0.0
   a_w_2(i,k,j) =a_w_2(i,k,j) +a_w_1(i,k,j)
   a_w_1(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_t_2(i,k,j) =a_t_2(i,k,j) +a_t_1(i,k,j)
   a_t_1(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO
   DO j =j_endv, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_v_2(i,k,j) =a_v_2(i,k,j) +a_v_1(i,k,j)
   a_v_1(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_endu, i_start, -1
   a_u_2(i,k,j) =a_u_2(i,k,j) +a_u_1(i,k,j)
   a_u_1(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
   a_mudf(i,j) =0.0
   a_ww_save(i,1,j) =0.0
   a_ww_save(i,kde,j) =0.0
   a_mu_2(i,j) =a_mu_2(i,j) +a_mu_1(i,j)
   a_mu_1(i,j) =0.0
   ENDDO
   ENDDO

   ELSE

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
   a_mu_1(i,j) =a_mu_1(i,j) +a_mu_2(i,j)
   a_mu_2(i,j) =a_mu_save(i,j)-a_mu_2(i,j)
   ENDDO
   ENDDO
   DO j =j_endv, j_start, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_muvs(i,j)
   a_muvs(i,j) =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mu_1(i,j) =a_mu_1(i,j) +a_Tmpv1
   a_mu_1(i,j-1) =a_mu_1(i,j-1) +a_Tmpv1
   ENDDO
   ENDDO
   DO j =j_end, j_start, -1
   DO i =i_endu, i_start, -1
   a_Tmpv2 =a_muus(i,j)
   a_muus(i,j) =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mu_1(i,j) =a_mu_1(i,j) +a_Tmpv1
   a_mu_1(i-1,j) =a_mu_1(i-1,j) +a_Tmpv1
   ENDDO
   DO i =i_end, i_start, -1
   a_mu_1(i,j) =a_mu_1(i,j) +a_muts(i,j)
   a_muts(i,j) =0.0
   ENDDO
   ENDDO

   END IF

   END SUBROUTINE a_small_step_prep

SUBROUTINE A_SMALL_STEP_FINISH(u_2, u_2b, u_1, v_2, v_2b, v_1, w_2, w_2b&
&  , w_1, t_2, t_2b, t_1, ph_2, ph_2b, ph_1, ww, wwb, ww1, ww1b, mu_2, &
&  mu_2b, mu_1, mut, mutb, muts, mutsb, muu, muub, muus, muusb, muv, muvb&
&  , muvs, muvsb, u_save, u_saveb, v_save, v_saveb, w_save, w_saveb, &
&  t_save, t_saveb, ph_save, ph_saveb, mu_save, mu_saveb, msfux, msfuy, &
&  msfvx, msfvy, msftx, msfty, h_diabatic, h_diabaticb, &
&  number_of_small_timesteps, dts, rk_step, rk_order, ids, ide, jds, jde&
&  , kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte&
&)
  IMPLICIT NONE
! religion first
!  stuff passed in
  INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde
  INTEGER, INTENT(IN) :: ims, ime, jms, jme, kms, kme
  INTEGER, INTENT(IN) :: its, ite, jts, jte, kts, kte
  INTEGER, INTENT(IN) :: number_of_small_timesteps
  INTEGER, INTENT(IN) :: rk_step, rk_order
  REAL, INTENT(IN) :: dts
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: u_1, v_1, &
&  w_1, t_1, ww1, ph_1
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: ww1b
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: u_2, v_2&
&  , w_2, t_2, ww, ph_2
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: u_2b, v_2b, w_2b, t_2b, &
&  wwb, ph_2b
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: u_save, &
&  v_save, w_save, t_save, ph_save, h_diabatic
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: u_saveb, v_saveb, &
&  w_saveb, t_saveb, ph_saveb, h_diabaticb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: muus, muvs
  REAL, DIMENSION(ims:ime, jms:jme) :: muusb, muvsb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: mu_2, mu_1
  REAL, DIMENSION(ims:ime, jms:jme) :: mu_2b
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: mut, muts, muu, &
&  muv, mu_save
  REAL, DIMENSION(ims:ime, jms:jme) :: mutb, mutsb, muub, muvb, mu_saveb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: msfux, msfuy, msfvx, &
&  msfvy, msftx, msfty
  REAL, DIMENSION(ims:ime) :: pwalls,qwalls
  REAL :: awalls,bwlals,gwalls
! local stuff
  INTEGER :: i, j, k
  INTEGER :: i_start, i_end, j_start, j_end, i_endu, j_endv
  INTEGER :: branch
  REAL :: tempb4
  REAL :: tempb3
  REAL :: tempb2
  REAL :: tempb1
  REAL :: tempb0
  REAL :: tempb
  INTRINSIC MIN

!<DESCRIPTION>
!
!  small_step_finish reconstructs the full uncoupled prognostic variables
!  from the coupled perturbation variables used in the small timesteps.
!
!</DESCRIPTION>
  i_start = its
  IF (ite .GT. ide - 1) THEN
    i_end = ide - 1
  ELSE
    i_end = ite
  END IF
  j_start = jts
  IF (jte .GT. jde - 1) THEN
    j_end = jde - 1
  ELSE
    j_end = jte
  END IF
  i_endu = ite
  j_endv = jte

  IF (rk_step .LT. rk_order) THEN
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF

  DO j=j_end,j_start,-1
    DO i=i_end,i_start,-1
      mu_saveb(i, j) = mu_2b(i, j)
    END DO
  END DO

  CALL POPCONTROL1B(branch)

  IF (branch .EQ. 0) THEN
    DO j=j_end,j_start,-1
      DO k=kde-1,kds,-1
        DO i=i_end,i_start,-1
          tempb3 = t_2b(i, k, j)/muts(i, j)
          tempb4 = -(dts*number_of_small_timesteps*tempb3)
          mutb(i, j) = mutb(i, j) + t_save(i, k, j)*tempb3 + h_diabatic(&
&            i, k, j)*tempb4
          h_diabaticb(i, k, j) = h_diabaticb(i, k, j) + mut(i, j)*tempb4
          t_saveb(i, k, j) = t_saveb(i, k, j) + mut(i, j)*tempb3
          mutsb(i, j) = mutsb(i, j) - (t_2(i, k, j)-mut(i, j)*(dts*&
&            number_of_small_timesteps*h_diabatic(i, k, j) -&
&            t_save(i, k, j)))*tempb3/muts(i, j)
          t_2b(i, k, j) = tempb3
        END DO
      END DO
    END DO
  ELSE
    DO j=j_end,j_start,-1
      DO k=kde-1,kds,-1
        DO i=i_end,i_start,-1
          tempb2 = t_2b(i, k, j)/muts(i, j)
          t_saveb(i, k, j) = t_saveb(i, k, j) + mut(i, j)*tempb2
          mutb(i, j) = mutb(i, j) + t_save(i, k, j)*tempb2
          mutsb(i, j) = mutsb(i, j) - (t_2(i, k, j)+t_save(i, k, j)*mut(&
&            i, j))*tempb2/muts(i, j)
          t_2b(i, k, j) = tempb2
        END DO
      END DO
    END DO
  END IF

  DO j=j_end,j_start,-1
    DO i=i_start,i_end
      pwalls(i) =msfty(i, j)/muts(i, j)
      qwalls(i) =mut(i, j)/muts(i, j)
    END DO
    DO k=kde,kds,-1
      DO i=i_end,i_start,-1
        ph_saveb(i, k, j) = ph_2b(i, k, j)
        tempb1 = w_2b(i, k, j)/muts(i, j)
        w_saveb(i, k, j) = mut(i, j)*tempb1
        mutb(i,j) = mutb(i,j) + w_save(i,k,j)*tempb1
        mutsb(i,j) = mutsb(i,j) -(pwalls(i)*w_2(i,k,j)+qwalls(i)*w_save(i,k,j))*tempb1
        w_2b(i, k, j) = msfty(i, j)*tempb1
      END DO
    END DO
  END DO

  ww1b = wwb

  DO j=j_end,j_start,-1
    DO i=i_start,i_endu
      pwalls(i) =msfuy(i, j)/muus(i, j)
      qwalls(i) =muu(i, j)/muus(i, j)
    END DO
    DO k=kde-1,kds,-1
      DO i=i_endu,i_start,-1
        tempb0 = u_2b(i, k, j)/muus(i, j)
        u_saveb(i, k, j) = u_saveb(i, k, j) + muu(i, j)*tempb0
        muub(i, j) = muub(i, j) + u_save(i, k, j)*tempb0
        muusb(i,j) = muusb(i,j) -(pwalls(i)*u_2(i,k,j)+qwalls(i)*u_save(i,k,j))*tempb0
        u_2b(i, k, j) = msfuy(i, j)*tempb0
      END DO
    END DO
  END DO

  DO j=j_endv,j_start,-1
    DO i=i_start,i_end
      pwalls(i) =msfvx(i, j)/muvs(i, j)
      qwalls(i) =muv(i, j)/muvs(i, j)
    END DO
    DO k=kde-1,kds,-1
      DO i=i_end,i_start,-1
        tempb = v_2b(i, k, j)/muvs(i, j)
        v_saveb(i, k, j) = v_saveb(i, k, j) + muv(i, j)*tempb
        muvb(i, j) = muvb(i, j) + v_save(i, k, j)*tempb
        muvsb(i,j) = muvsb(i,j) -(pwalls(i)*v_2(i,k,j)+qwalls(i)*v_save(i,k,j))*tempb
        v_2b(i, k, j) = msfvx(i, j)*tempb
      END DO
    END DO
  END DO

END SUBROUTINE A_SMALL_STEP_FINISH

   SUBROUTINE a_calc_p_rho(al,a_al,p,a_p,ph,a_ph,alt,a_alt,t_2,a_t_2, &
   t_1,a_t_1,c2a,a_c2a,pm1,a_pm1,mu,a_mu,muts,a_muts,znu,t0,rdnw,dnw, &
   smdiv,non_hydrostatic,step,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite, &
   jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   INTEGER :: step
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_al,al,a_p,p
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_alt,alt,a_t_2,t_2,a_t_1,t_1,a_c2a,c2a
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_ph,ph,a_pm1,pm1
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mu,mu,a_muts,muts
   REAL,DIMENSION(kms:kme) :: dnw,rdnw,znu
   REAL :: t0,smdiv
   LOGICAL :: non_hydrostatic
   INTEGER :: i,j,k
   INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end
   REAL :: a_ptmp,ptmp,gwalls

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,Tmpv008,a_Tmpv8

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[0]
      i_start = its
      i_end   = min(ite,ide-1)
      j_start = jts
      j_end   = min(jte,jde-1)
      k_start = kts
      k_end = min(kte,kde-1)

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[3]

   IF(step == 0) THEN

   DO j =j_start,j_end 
   DO k =k_start,k_end
   DO i =i_start,i_end
   a_p(i,k,j) =a_p(i,k,j) +a_pm1(i,k,j)
   a_pm1(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

   ELSE

   DO j =j_start,j_end 
   DO k =k_start,k_end
   DO i =i_start,i_end
   a_Tmpv1 =smdiv*a_p(i,k,j)
   a_p(i,k,j) =a_p(i,k,j) +a_pm1(i,k,j)+a_Tmpv1
   a_pm1(i,k,j) =-a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   END IF

!LPB[2]
   IF(non_hydrostatic) THEN

   DO j =j_start,j_end
   DO k =k_start,k_end
   gwalls =rdnw(k)
   DO i =i_start,i_end
   Tmpv001 =(t0 +t_1(i,k,j))
   Tmpv002 =t_2(i,k,j) -mu(i,j)*t_1(i,k,j)
   Tmpv004 =muts(i,j)*Tmpv001
   Tmpv003 =alt(i,k,j)*Tmpv002/Tmpv004
   Tmpv008 =(alt(i,k,j)*mu(i,j)+gwalls*(ph(i,k+1,j)-ph(i,k,j)))/muts(i,j)

   a_Tmpv7 =a_p(i,k,j)
   a_c2a(i,k,j) =a_c2a(i,k,j) +(Tmpv003+Tmpv008)*a_Tmpv7
   a_Tmpv6 =c2a(i,k,j)*a_Tmpv7
   a_Tmpv3 =a_Tmpv6/Tmpv004
   a_Tmpv4 =-Tmpv003/Tmpv004*a_Tmpv6
   a_Tmpv2 =alt(i,k,j)*a_Tmpv3
   a_t_2(i,k,j) =a_t_2(i,k,j) +a_Tmpv2
   a_t_1(i,k,j) =a_t_1(i,k,j) -mu(i,j)*a_Tmpv2 +muts(i,j)*a_Tmpv4

   a_Tmpv5 =a_al(i,k,j) -a_Tmpv6
   a_muts(i,j) =a_muts(i,j) +Tmpv008/muts(i,j)*a_Tmpv5 +Tmpv001*a_Tmpv4
   a_Tmpv4 =-a_Tmpv5/muts(i,j)
   a_Tmpv1 =gwalls*a_Tmpv4
   a_ph(i,k+1,j) =a_ph(i,k+1,j) +a_Tmpv1
   a_ph(i,k,j) =a_ph(i,k,j) -a_Tmpv1
   a_alt(i,k,j) =a_alt(i,k,j) +mu(i,j)*a_Tmpv4 +Tmpv002*a_Tmpv3
   a_mu(i,j) =a_mu(i,j) +alt(i,k,j)*a_Tmpv4 -t_1(i,k,j)*a_Tmpv2
   ENDDO
   ENDDO
   ENDDO

   ELSE

   DO j =j_end, j_start, -1
   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   Tmpv001 =t0 +t_1(i,k,j)
   Tmpv002 =t_2(i,k,j)-mu(i,j)*t_1(i,k,j)
   Tmpv003 =alt(i,k,j)*Tmpv002
   Tmpv004 =muts(i,j)*Tmpv001
   Tmpv005 =Tmpv003/Tmpv004
   Tmpv006 =mu(i,j)*znu(k)/c2a(i,k,j)

   a_Tmpv5 =a_ph(i,k+1,j)
   a_ph(i,k+1,j) =0.0
   a_ph(i,k,j) =a_ph(i,k,j) +a_Tmpv5
   a_Tmpv8 =-dnw(k)*a_Tmpv5

   a_Tmpv7 =a_al(i,k,j) +muts(i,j)*a_Tmpv8
   a_c2a(i,k,j) =a_c2a(i,k,j) +Tmpv006/c2a(i,k,j)*a_Tmpv7
   a_Tmpv3 =a_Tmpv7/Tmpv004
   a_Tmpv4 =-Tmpv003/Tmpv004*a_Tmpv3
   a_muts(i,j) =a_muts(i,j) +Tmpv001*a_Tmpv4 +(Tmpv005-Tmpv006)*a_Tmpv8
   a_alt(i,k,j) =a_alt(i,k,j) +Tmpv002*a_Tmpv3 +mu(i,j)*a_Tmpv8
   a_Tmpv2 =alt(i,k,j)*a_Tmpv3
   a_t_2(i,k,j) =a_t_2(i,k,j) +a_Tmpv2
   a_t_1(i,k,j) =a_t_1(i,k,j) -mu(i,j)*a_Tmpv2 +muts(i,j)*a_Tmpv4

   a_mu(i,j) =a_mu(i,j) +znu(k)*(a_p(i,k,j) -a_Tmpv7/c2a(i,k,j)) -&
             t_1(i,k,j)*a_Tmpv2 +alt(i,k,j)*a_Tmpv8
   ENDDO
   ENDDO
   ENDDO

   END IF

   a_p(i_start:i_end,k_start:k_end,j_start:j_end) =0.0
   a_al(i_start:i_end,k_start:k_end,j_start:j_end) =0.0

   END SUBROUTINE a_calc_p_rho

   SUBROUTINE a_calc_coef_w(a,a_a,alpha,a_alpha,gamma,a_gamma,mut,a_mut, &
   cqw,a_cqw,rdn,rdnw,c2a,a_c2a,dts,g,epssm,top_lid,ids,ide,jds,jde,kds,kde,ims, &
   ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   LOGICAL :: top_lid
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_c2a,c2a,a_cqw,cqw
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_alpha,alpha,a_gamma,gamma,a_a,a
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mut,mut
   REAL,DIMENSION(kms:kme) :: rdn,rdnw
   REAL :: epssm,dts,g
   REAL,DIMENSION(ims:ime) :: a_cof,cof
   REAL :: a_b,b,a_c,c
   INTEGER :: i,j,k,i_start,i_end,j_start,j_end,k_start,k_end
   INTEGER :: ij,ijp,ijm,lid_flag

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6
   REAL,DIMENSION(its:min(ite,ide-1),2:kde-1) :: Tmpv301
   REAL,DIMENSION(ims:ime) :: Tmpv202
   REAL :: awalls,bwalls,cwalls,dwalls,ewalls,fwalls,gwalls

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[0]

   i_start = its
   i_end   = min(ite,ide-1)
   j_start = jts
   j_end   = min(jte,jde-1)
   k_start = kts
   k_end   = kte-1

   lid_flag=1
   IF(top_lid) lid_flag=0

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   a_cof =0.0

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[2]
   ewalls=.5*dts*g*(1.+epssm)
   fwalls=-2.*rdnw(kde-1)*rdnw(kde-1)

   DO j =j_end, j_start, -1

   DO i =i_start, i_end
   gwalls =ewalls/mut(i,j)
   cof(i) =gwalls*gwalls
   a(i,2,j) =0.
   a(i,kde,j) =cof(i)*fwalls*c2a(i,kde-1,j)*lid_flag
   gamma(i,1,j) =0.
   ENDDO

   DO k =3, kde-1
   awalls =rdn(k)*rdnw(k-1)
   DO i =i_start, i_end
   a(i,k,j) =-cqw(i,k,j)*cof(i)*awalls*c2a(i,k-1,j)
   ENDDO
   ENDDO

   DO k =2, kde-1
   awalls=rdnw(k-1)
   bwalls=rdn(k)*rdnw(k)
   cwalls=rdn(k)
   dwalls=rdnw(k)
   DO i =i_start, i_end
   Tmpv001 =cqw(i,k,j)*cof(i)

   b =1.+cwalls*Tmpv001*(dwalls*c2a(i,k,j) +awalls*c2a(i,k-1,j))
   c =-Tmpv001*bwalls*c2a(i,k,j)

   Tmpv301(i,k) =gamma(i,k-1,j)
   alpha(i,k,j) =b-a(i,k,j)*gamma(i,k-1,j)
   gamma(i,k,j) =c/alpha(i,k,j)
   ENDDO
   ENDDO

   awalls=rdnw(kde-1)*rdnw(kde-1)

   DO i =i_end, i_start, -1
   b =1. +2.*cof(i)*awalls*c2a(i,kde-1,j)

   Tmpv002 =b -a(i,kde,j)*gamma(i,kde-1,j)
   a_gamma(i,kde,j) =0.0

   a_Tmpv3 =a_alpha(i,kde,j)
   a_alpha(i,kde,j) =0.0
   a_Tmpv2 =-a_Tmpv3/(Tmpv002*Tmpv002)
   a_a(i,kde,j) =a_a(i,kde,j) -gamma(i,kde-1,j)*a_Tmpv2
   a_gamma(i,kde-1,j) =a_gamma(i,kde-1,j) -a(i,kde,j)*a_Tmpv2

   a_cof(i) =a_cof(i) +2.*awalls*c2a(i,kde-1,j)*a_Tmpv2
   a_c2a(i,kde-1,j) =a_c2a(i,kde-1,j) +2.*cof(i)*awalls*a_Tmpv2
   ENDDO

   DO k =kde-1, 2, -1
   awalls=rdnw(k-1)
   cwalls=rdn(k)
   dwalls=rdnw(k)
   bwalls=cwalls*dwalls
   DO i =i_end, i_start, -1
   a_Tmpv1 =a_gamma(i,k,j)
   a_gamma(i,k,j) =0.0
   gwalls =cwalls*cqw(i,k,j)*cof(i)
   a_Tmpv3 =a_alpha(i,k,j) -gwalls*dwalls*c2a(i,k,j)*a_Tmpv1
   a_Tmpv6 =-a_Tmpv3/alpha(i,k,j)/alpha(i,k,j)
   a_a(i,k,j) =a_a(i,k,j) -Tmpv301(i,k)*a_Tmpv6
   a_gamma(i,k-1,j) =a_gamma(i,k-1,j) -a(i,k,j)*a_Tmpv6

   a_Tmpv4 =a_Tmpv1/alpha(i,k,j)
   a_Tmpv3 =c2a(i,k,j)*a_Tmpv4
   a_c2a(i,k,j) =a_c2a(i,k,j) -gwalls*dwalls*a_Tmpv4
   a_Tmpv2 =gwalls*a_Tmpv6
   a_c2a(i,k,j) =a_c2a(i,k,j) +dwalls*a_Tmpv2
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) +awalls*a_Tmpv2
   a_Tmpv5 =cwalls*((dwalls*c2a(i,k,j)+awalls*c2a(i,k-1,j))*a_Tmpv6 -dwalls*a_Tmpv3)
   a_cqw(i,k,j) =a_cqw(i,k,j) +cof(i)*a_Tmpv5
   a_cof(i) =a_cof(i) +cqw(i,k,j)*a_Tmpv5
   ENDDO
   ENDDO

   a_alpha(i_start:i_end,2:kde-1,j) =0.0

   DO k =kde-1, 3, -1
   awalls =rdn(k)*rdnw(k-1)
   DO i =i_end, i_start, -1
   a_Tmpv4 =awalls*a_a(i,k,j)
   a_Tmpv3 =c2a(i,k-1,j)*a_Tmpv4
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) -cqw(i,k,j)*cof(i)*a_Tmpv4
   a_cqw(i,k,j) =a_cqw(i,k,j) -cof(i)*a_Tmpv3
   a_cof(i) =a_cof(i) -cqw(i,k,j)*a_Tmpv3
   ENDDO
   ENDDO

   a_a(i_start:i_end,3:kde-1,j) =0.0

   DO i =i_end, i_start, -1
   a_gamma(i,1,j) =0.0

   a_Tmpv2 =a_a(i,kde,j)
   a_a(i,kde,j) =0.0
   a_Tmpv1 =lid_flag*a_Tmpv2
   a_cof(i) =a_cof(i) +fwalls*c2a(i,kde-1,j)*a_Tmpv1
   a_c2a(i,kde-1,j) =a_c2a(i,kde-1,j) +cof(i)*fwalls*a_Tmpv1

   a_a(i,2,j) =0.0

   cwalls=ewalls/mut(i,j)
   a_mut(i,j) =a_mut(i,j) -2.*cwalls/mut(i,j)*cwalls*a_cof(i)
   a_cof(i) =0.0
   ENDDO

   ENDDO

   END SUBROUTINE a_calc_coef_w

   SUBROUTINE a_advance_uv(u,a_u,ru_tend,a_ru_tend,v,a_v,rv_tend, &
   a_rv_tend,p,a_p,pb,ph,a_ph,php,a_php,alt,a_alt,al,a_al,mu,a_mu, &
   muu,a_muu,cqu,a_cqu,muv,a_muv,cqv,a_cqv,mudf,a_mudf,msfux,msfuy,msfvx, &
   msfvx_inv,msfvy,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,emdiv,rdnw,config_flags,spec_zone, &
   non_hydrostatic,top_lid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts, &
   jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   LOGICAL :: non_hydrostatic,top_lid
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   INTEGER :: spec_zone
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_u,u,a_v,v
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_ru_tend,ru_tend,a_rv_tend,rv_tend, &
   a_ph,ph,a_php,php,a_p,p,pb,a_alt,alt,a_al,al,a_cqu,cqu,a_cqv,cqv
   REAL,DIMENSION(ims:ime,jms:jme) :: a_muu,muu,a_muv,muv,a_mu,mu,a_mudf,mudf
   REAL,DIMENSION(kms:kme) :: fnm,fnp,rdnw
   REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msfvx_inv
   REAL :: rdx,rdy,dts,cf1,cf2,cf3,emdiv
   REAL,DIMENSION(its:ite,kts:kte) :: a_dpn,dpn,a_dpxy,dpxy
   REAL,DIMENSION(its:ite) :: a_mudf_xy,mudf_xy,pwalls
   REAL,DIMENSION(1:4,ims:ime) :: TmpvA00
   REAL :: dx,dy
   INTEGER :: i,j,k,i_start,i_end,j_start,j_end,k_start,k_end
   INTEGER :: i_endu,j_endv,k_endw
   INTEGER :: i_start_up,i_end_up,j_start_up,j_end_up
   INTEGER :: i_start_vp,i_end_vp,j_start_vp,j_end_vp
   INTEGER :: i_start_u_tend,i_end_u_tend,j_start_v_tend,j_end_v_tend

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,a_Tmpv8,Tmpv008,a_Tmpv9, &
   Tmpv009,a_Tmpv10,Tmpv010,a_Tmpv11,Tmpv011,Tmpv012

   REAL :: awalls,bwalls,cwalls,dwalls

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[1]
    IF( config_flags%nested .or. config_flags%specified ) THEN
         i_start = max( its,ids+spec_zone )
         i_end   = min( ite,ide-spec_zone-1 )
         j_start = max( jts,jds+spec_zone )
         j_end   = min( jte,jde-spec_zone-1 )
         k_start = kts
         k_end   = min( kte, kde-1 )
         i_endu = min( ite,ide-spec_zone )
         j_endv = min( jte,jde-spec_zone )
         k_endw = k_end
      IF( config_flags%periodic_x) THEN
           i_start = its
           i_end   = min(ite,ide-1)
           i_endu = ite
         ENDIF
       ELSE
         i_start = its
         i_end   = min(ite,ide-1)
         j_start = jts
         j_end   = min(jte,jde-1)
         k_start = kts
         k_end   = kte-1
         i_endu = ite
         j_endv = jte
         k_endw = k_end
   ENDIF

      i_start_up = i_start
      i_end_up   = i_endu
      j_start_up = j_start
      j_end_up   = j_end
      i_start_vp = i_start
      i_end_vp   = i_end
      j_start_vp = j_start
      j_end_vp   = j_endv

      IF ( (config_flags%open_xs   .or.       &
            config_flags%symmetric_xs   )     &
            .and. (its == ids) )              &
                 i_start_up = i_start_up + 1

      IF ( (config_flags%open_xe    .or.    &
            config_flags%symmetric_xe   )   &
             .and. (ite == ide) )           &
                 i_end_up   = i_end_up - 1

      IF ( (config_flags%open_ys    .or.     &
            config_flags%symmetric_ys  .or.     &
            config_flags%polar   )    &
                     .and. (jts == jds) )    &
                 j_start_vp = j_start_vp + 1

      IF ( (config_flags%open_ye     .or.   &
            config_flags%symmetric_ye  .or.     &
            config_flags%polar   )    &
            .and. (jte == jde) )            &
                 j_end_vp   = j_end_vp - 1

      i_start_u_tend = i_start
      i_end_u_tend   = i_endu
      j_start_v_tend = j_start
      j_end_v_tend   = j_endv

      IF ( config_flags%symmetric_xs .and. (its == ids) )   &
                     i_start_u_tend = i_start_u_tend+1
      IF ( config_flags%symmetric_xe .and. (ite == ide) )   &
                     i_end_u_tend = i_end_u_tend-1
      IF ( config_flags%symmetric_ys .and. (jts == jds) )   &
                     j_start_v_tend = j_start_v_tend+1
      IF ( config_flags%symmetric_ye .and. (jte == jde) )   &
                     j_end_v_tend = j_end_v_tend-1

!LPB[18]
      dx = 1./rdx
      dy = 1./rdy

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   Do K1_ADJ =kts, kte
   Do K0_ADJ =its, ite
   a_dpn(K0_ADJ,K1_ADJ) =0.0
   End Do
   End Do

   Do K0_ADJ =its, ite
   a_mudf_xy(K0_ADJ) =0.0
   End Do

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[21]
   IF(config_flags%polar) THEN

   IF(jte == jde) THEN

   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_v(i,k,jde) =0.0
   ENDDO
   ENDDO

   END IF

   IF(jts == jds) THEN

   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   a_v(i,k,jds) =0.0
   ENDDO
   ENDDO

   END IF
   END IF

!LPB[20]
   DO j =j_end_v_tend, j_start_v_tend, -1
   IF(( j >= j_start_vp) .and.( j <= j_end_vp  ) ) THEN
   IF(non_hydrostatic) THEN
   DO i =i_start, i_end
     dpn(i,1) = .5*( cf1*(p(i,1,j)+p(i,1,j-1))+cf2*(p(i,2,j)+p(i,2,j-1))  &
              +cf3*(p(i,3,j)+p(i,3,j-1)) )
     dpn(i,kde) = 0.
   ENDDO

   IF(top_lid) THEN
   DO i =i_start, i_end
      dpn(i,kde) =.5*( cf1*(p(i,kde-1,j-1)+p(i,kde-1,j))   &
                 +cf2*(p(i,kde-2,j-1)+p(i,kde-2,j))   &
                 +cf3*(p(i,kde-3,j-1)+p(i,kde-3,j))  )
   ENDDO
   ENDIF

   DO k =k_start+1, k_end
   awalls=fnm(k)
   bwalls=fnp(k)
   DO i =i_start, i_end
      dpn(i,k) = .5*( awalls*(p(i,k  ,j)+p(i,k  ,j-1))  &
               +bwalls*(p(i,k-1,j)+p(i,k-1,j-1)) )
   ENDDO
   ENDDO

   ELSE
     dpxy =0.
   END IF

   END IF

   IF(( j >= j_start_vp).and.( j <= j_end_vp  ) ) THEN

   DO k = k_start,k_end
   DO i = i_start,i_end
   a_mudf_xy(i) =a_mudf_xy(i) +a_v(i,k,j)
   a_dpxy(i,k) =-dts*cqv(i,k,j)*a_v(i,k,j)
   ENDDO
   ENDDO

   IF(non_hydrostatic) THEN

   DO k =k_end, k_start, -1
   bwalls=rdnw(k)
   DO i =i_end, i_start, -1
   awalls=msfvy(i,j)/msfvx(i,j)*rdy
   Tmpv002 =awalls*(php(i,k,j)-php(i,k,j-1))
   Tmpv007 =bwalls*(dpn(i,k+1)-dpn(i,k)) -.5*(mu(i,j-1) +mu(i,j))
   dpxy(i,k) =Tmpv002*Tmpv007

   a_Tmpv2 =Tmpv007*a_dpxy(i,k)
   a_Tmpv7 =Tmpv002*a_dpxy(i,k)
   a_Tmpv5 =-.5*a_Tmpv7
   a_mu(i,j-1) =a_mu(i,j-1) +a_Tmpv5
   a_mu(i,j) =a_mu(i,j) +a_Tmpv5
   a_Tmpv3 =bwalls*a_Tmpv7
   a_dpn(i,k+1) =a_dpn(i,k+1) +a_Tmpv3
   a_dpn(i,k) =a_dpn(i,k) -a_Tmpv3
   a_Tmpv1 =awalls*a_Tmpv2
   a_php(i,k,j) =a_php(i,k,j) +a_Tmpv1
   a_php(i,k,j-1) =a_php(i,k,j-1) -a_Tmpv1
   ENDDO
   ENDDO

   DO k =k_end, k_start+1, -1
   awalls=fnp(k)
   bwalls=fnm(k)
   DO i =i_end, i_start, -1
   a_Tmpv5 =.5*a_dpn(i,k)
   a_dpn(i,k) =0.0
   a_Tmpv3 =awalls*a_Tmpv5
   a_p(i,k-1,j) =a_p(i,k-1,j) +a_Tmpv3
   a_p(i,k-1,j-1) =a_p(i,k-1,j-1) +a_Tmpv3
   a_Tmpv1 =bwalls*a_Tmpv5
   a_p(i,k,j) =a_p(i,k,j) +a_Tmpv1
   a_p(i,k,j-1) =a_p(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   IF(top_lid) THEN

   DO i =i_end, i_start, -1
   a_Tmpv9 =a_dpn(i,kde)
   a_dpn(i,kde) =0.0
   a_Tmpv8 =.5*a_Tmpv9
   a_Tmpv5 =a_Tmpv8
   a_Tmpv7 =a_Tmpv8
   a_Tmpv6 =cf3*a_Tmpv7
   a_p(i,kde-3,j-1) =a_p(i,kde-3,j-1) +a_Tmpv6
   a_p(i,kde-3,j) =a_p(i,kde-3,j) +a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_Tmpv3 =cf2*a_Tmpv4
   a_p(i,kde-2,j-1) =a_p(i,kde-2,j-1) +a_Tmpv3
   a_p(i,kde-2,j) =a_p(i,kde-2,j) +a_Tmpv3
   a_Tmpv1 =cf1*a_Tmpv2
   a_p(i,kde-1,j-1) =a_p(i,kde-1,j-1) +a_Tmpv1
   a_p(i,kde-1,j) =a_p(i,kde-1,j) +a_Tmpv1
   ENDDO
   ENDIF

   DO i =i_end, i_start, -1
   a_dpn(i,kde) =0.0
   a_Tmpv9 =a_dpn(i,1)
   a_dpn(i,1) =0.0
   a_Tmpv8 =.5*a_Tmpv9
   a_Tmpv5 =a_Tmpv8
   a_Tmpv7 =a_Tmpv8
   a_Tmpv6 =cf3*a_Tmpv7
   a_p(i,3,j) =a_p(i,3,j) +a_Tmpv6
   a_p(i,3,j-1) =a_p(i,3,j-1) +a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_Tmpv3 =cf2*a_Tmpv4
   a_p(i,2,j) =a_p(i,2,j) +a_Tmpv3
   a_p(i,2,j-1) =a_p(i,2,j-1) +a_Tmpv3
   a_Tmpv1 =cf1*a_Tmpv2
   a_p(i,1,j) =a_p(i,1,j) +a_Tmpv1
   a_p(i,1,j-1) =a_p(i,1,j-1) +a_Tmpv1
   ENDDO
   END IF

   DO k =k_end, k_start, -1
   DO i =i_end, i_start, -1
   Tmpv004 =alt(i,k,j) +alt(i,k,j-1)
   Tmpv005 =p(i,k,j) -p(i,k,j-1)
   Tmpv007 =ph(i,k+1,j) -ph(i,k+1,j-1) +ph(i,k,j) -ph(i,k,j-1) +Tmpv004*Tmpv005
   bwalls=pb(i,k,j)-pb(i,k,j-1)
   Tmpv010 =Tmpv007 +bwalls*(al(i,k,j) +al(i,k,j-1))
   awalls =(msfvy(i,j)/msfvx(i,j))*.5*rdy
   Tmpv011 =awalls*Tmpv010

   a_cqv(i,k,j) =a_cqv(i,k,j) -dts*(dpxy(i,k)+Tmpv011*muv(i,j))*a_v(i,k,j)

   a_muv(i,j) =a_muv(i,j) +Tmpv011*a_dpxy(i,k)
   a_Tmpv10 =awalls*muv(i,j)*a_dpxy(i,k)
   a_Tmpv8 =bwalls*a_Tmpv10
   a_al(i,k,j) =a_al(i,k,j) +a_Tmpv8
   a_al(i,k,j-1) =a_al(i,k,j-1) +a_Tmpv8
   a_Tmpv4 =Tmpv005*a_Tmpv10
   a_Tmpv5 =Tmpv004*a_Tmpv10
   a_p(i,k,j) =a_p(i,k,j) +a_Tmpv5
   a_p(i,k,j-1) =a_p(i,k,j-1) -a_Tmpv5
   a_alt(i,k,j) =a_alt(i,k,j) +a_Tmpv4
   a_alt(i,k,j-1) =a_alt(i,k,j-1) +a_Tmpv4
   a_ph(i,k,j) =a_ph(i,k,j) +a_Tmpv10
   a_ph(i,k,j-1) =a_ph(i,k,j-1) -a_Tmpv10
   a_ph(i,k+1,j) =a_ph(i,k+1,j) +a_Tmpv10
   a_ph(i,k+1,j-1) =a_ph(i,k+1,j-1) -a_Tmpv10
   ENDDO
   ENDDO

   END IF

   DO i =i_end, i_start, -1
   a_Tmpv3 =a_mudf_xy(i)
   a_mudf_xy(i) =0.0
   a_Tmpv2 =msfvx_inv(i,j)*a_Tmpv3
   a_Tmpv1 =-emdiv*dy*a_Tmpv2
   a_mudf(i,j) =a_mudf(i,j) +a_Tmpv1
   a_mudf(i,j-1) =a_mudf(i,j-1) -a_Tmpv1
   ENDDO

   a_rv_tend(i_start:i_end,k_start:k_end,j) =a_rv_tend(i_start:i_end,k_start:k_end,j) &
                                            +dts*a_v(i_start:i_end,k_start:k_end,j)

   ENDDO

!LPB[19]
   DO j =j_end, j_start, -1

   IF(non_hydrostatic) THEN
   DO i =i_start_up, i_end_up
   Tmpv001 =p(i,1,j) +p(i-1,1,j)
   Tmpv002 =cf1*Tmpv001
   Tmpv003 =p(i,2,j) +p(i-1,2,j)
   Tmpv004 =cf2*Tmpv003
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =p(i,3,j) +p(i-1,3,j)
   Tmpv007 =cf3*Tmpv006
   Tmpv008 =Tmpv005 +Tmpv007
   Tmpv009 =.5*Tmpv008
   dpn(i,1) =Tmpv009

   dpn(i,kde) =0.

   ENDDO

   IF(top_lid) THEN
   DO i =i_start_up, i_end_up
   Tmpv001 =p(i-1,kde-1,j) +p(i,kde-1,j)
   Tmpv002 =cf1*Tmpv001
   Tmpv003 =p(i-1,kde-2,j) +p(i,kde-2,j)
   Tmpv004 =cf2*Tmpv003
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =p(i-1,kde-3,j) +p(i,kde-3,j)
   Tmpv007 =cf3*Tmpv006
   Tmpv008 =Tmpv005 +Tmpv007
   Tmpv009 =.5*Tmpv008
   dpn(i,kde) =Tmpv009
   ENDDO
   ENDIF

   DO k =k_start+1, k_end
   awalls=fnm(k)
   bwalls=fnp(k)
   DO i =i_start_up, i_end_up
   dpn(i,k) =.5*(awalls*(p(i,k,j) +p(i-1,k,j))+bwalls*(p(i,k-1,j) +p(i-1,k-1,j)))
   ENDDO
   ENDDO

   ELSE
     dpxy =0.
   END IF

   DO k =k_start,k_end
   DO i =i_start_up,i_end_up
   a_mudf_xy(i) =a_mudf_xy(i) +a_u(i,k,j)
   a_dpxy(i,k) =-dts*cqu(i,k,j)*a_u(i,k,j)
   ENDDO
   ENDDO

   IF(non_hydrostatic) THEN

   DO i =i_start_up,i_end_up
   pwalls(i)=(msfux(i,j)/msfuy(i,j))*rdx
   ENDDO

   DO k =k_end, k_start, -1
   awalls=rdnw(k)
   DO i =i_end_up, i_start_up, -1
   Tmpv001 =php(i,k,j)-php(i-1,k,j)
   Tmpv002 =pwalls(i)*Tmpv001
   Tmpv004 =awalls*(dpn(i,k+1)-dpn(i,k))
   Tmpv007 =Tmpv004 -.5*(mu(i-1,j)+mu(i,j))
   dpxy(i,k) =Tmpv002*Tmpv007

   a_Tmpv2 =Tmpv007*a_dpxy(i,k)
   a_Tmpv7 =Tmpv002*a_dpxy(i,k)
   a_Tmpv5 =-.5*a_Tmpv7
   a_mu(i-1,j) =a_mu(i-1,j) +a_Tmpv5
   a_mu(i,j) =a_mu(i,j) +a_Tmpv5
   a_Tmpv3 =awalls*a_Tmpv7
   a_dpn(i,k+1) =a_dpn(i,k+1) +a_Tmpv3
   a_dpn(i,k) =a_dpn(i,k) -a_Tmpv3
   a_Tmpv1 =pwalls(i)*a_Tmpv2
   a_php(i,k,j) =a_php(i,k,j) +a_Tmpv1
   a_php(i-1,k,j) =a_php(i-1,k,j) -a_Tmpv1
   ENDDO
   ENDDO

   DO k =k_end, k_start+1, -1
   awalls=.5*fnp(k)
   bwalls=.5*fnm(k)
   DO i =i_end_up, i_start_up, -1
   a_Tmpv3 =awalls*a_dpn(i,k)
   a_p(i,k-1,j) =a_p(i,k-1,j) +a_Tmpv3
   a_p(i-1,k-1,j) =a_p(i-1,k-1,j) +a_Tmpv3
   a_Tmpv1 =bwalls*a_dpn(i,k)
   a_p(i,k,j) =a_p(i,k,j) +a_Tmpv1
   a_p(i-1,k,j) =a_p(i-1,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   a_dpn(i_start_up:i_end_up,(k_start+1):k_end) =0.0

   IF(top_lid) THEN
   DO i =i_end_up, i_start_up, -1
   a_Tmpv8 =.5*a_dpn(i,kde)
   a_dpn(i,kde) =0.0
   a_Tmpv6 =cf3*a_Tmpv8
   a_p(i-1,kde-3,j) =a_p(i-1,kde-3,j) +a_Tmpv6
   a_p(i,kde-3,j) =a_p(i,kde-3,j) +a_Tmpv6
   a_Tmpv3 =cf2*a_Tmpv8
   a_p(i-1,kde-2,j) =a_p(i-1,kde-2,j) +a_Tmpv3
   a_p(i,kde-2,j) =a_p(i,kde-2,j) +a_Tmpv3
   a_Tmpv1 =cf1*a_Tmpv8
   a_p(i-1,kde-1,j) =a_p(i-1,kde-1,j) +a_Tmpv1
   a_p(i,kde-1,j) =a_p(i,kde-1,j) +a_Tmpv1
   ENDDO
   ENDIF

   DO i =i_end_up, i_start_up, -1
   a_dpn(i,kde) =0.0
   a_Tmpv8 =.5*a_dpn(i,1)
   a_dpn(i,1) =0.0
   a_Tmpv6 =cf3*a_Tmpv8
   a_p(i,3,j) =a_p(i,3,j) +a_Tmpv6
   a_p(i-1,3,j) =a_p(i-1,3,j) +a_Tmpv6
   a_Tmpv3 =cf2*a_Tmpv8
   a_p(i,2,j) =a_p(i,2,j) +a_Tmpv3
   a_p(i-1,2,j) =a_p(i-1,2,j) +a_Tmpv3
   a_Tmpv1 =cf1*a_Tmpv8
   a_p(i,1,j) =a_p(i,1,j) +a_Tmpv1
   a_p(i-1,1,j) =a_p(i-1,1,j) +a_Tmpv1
   ENDDO

   END IF

   DO i =i_start_up, i_end_up
   pwalls(i) =(msfux(i,j)/msfuy(i,j))*.5*rdx
   ENDDO

   DO k =k_end, k_start, -1
   DO i =i_start_up, i_end_up
   Tmpv004 =alt(i,k,j) +alt(i-1,k,j)
   Tmpv005 =p(i,k,j) -p(i-1,k,j)
   awalls=pb(i,k,j)-pb(i-1,k,j)
   TmpvA00(1,i) =pwalls(i)*(ph(i,k+1,j)-ph(i-1,k+1,j)+ph(i,k,j)-ph(i-1,k,j)+&
                 Tmpv004*Tmpv005+(al(i,k,j)+al(i-1,k,j))*awalls)
   TmpvA00(2,i) =awalls
   TmpvA00(3,i) =Tmpv005
   TmpvA00(4,i) =Tmpv004
   ENDDO

   DO i =i_start_up, i_end_up
   a_cqu(i,k,j) =a_cqu(i,k,j) -dts*(dpxy(i,k)+muu(i,j)*TmpvA00(1,i))*a_u(i,k,j)
   a_muu(i,j) =a_muu(i,j) +TmpvA00(1,i)*a_dpxy(i,k)
   a_Tmpv10 =pwalls(i)*muu(i,j)*a_dpxy(i,k)
   a_Tmpv8 =TmpvA00(2,i)*a_Tmpv10
   a_al(i,k,j) =a_al(i,k,j) +a_Tmpv8
   a_al(i-1,k,j) =a_al(i-1,k,j) +a_Tmpv8
   a_Tmpv4 =TmpvA00(3,i)*a_Tmpv10
   a_Tmpv5 =TmpvA00(4,i)*a_Tmpv10
   a_p(i,k,j) =a_p(i,k,j) +a_Tmpv5
   a_p(i-1,k,j) =a_p(i-1,k,j) -a_Tmpv5
   a_alt(i,k,j) =a_alt(i,k,j) +a_Tmpv4
   a_alt(i-1,k,j) =a_alt(i-1,k,j) +a_Tmpv4
   a_ph(i,k,j) =a_ph(i,k,j) +a_Tmpv10
   a_ph(i-1,k,j) =a_ph(i-1,k,j) -a_Tmpv10
   a_ph(i,k+1,j) =a_ph(i,k+1,j) +a_Tmpv10
   a_ph(i-1,k+1,j) =a_ph(i-1,k+1,j) -a_Tmpv10
   ENDDO
   ENDDO

   DO i =i_end_up, i_start_up, -1
   a_Tmpv2 =a_mudf_xy(i)/msfuy(i,j)
   a_mudf_xy(i) =0.0
   a_Tmpv1 =emdiv*dx*a_Tmpv2
   a_mudf(i,j) =a_mudf(i,j) -a_Tmpv1
   a_mudf(i-1,j) =a_mudf(i-1,j) +a_Tmpv1
   ENDDO

   a_ru_tend(i_start_u_tend:i_end_u_tend,k_start:k_end,j) = &
   a_ru_tend(i_start_u_tend:i_end_u_tend,k_start:k_end,j) + &
   dts*a_u(i_start_u_tend:i_end_u_tend,k_start:k_end,j)
   ENDDO

   END SUBROUTINE a_advance_uv

   SUBROUTINE a_advance_mu_t(ww,a_ww,ww_1,a_ww_1,u,a_u,u_1,a_u_1,v, &
   a_v,v_1,a_v_1,mu,a_mu,mut,a_mut,muave,a_muave,muts,a_muts,muu,a_muu, &
   muv,a_muv,mudf,a_mudf,uam,a_uam,vam,a_vam,wwam,a_wwam,t,a_t, &
   t_1,a_t_1,t_ave,a_t_ave,ft,a_ft,mu_tend,a_mu_tend,rdx,rdy,dts,epssm,dnw, &
   fnm,fnp,rdnw,msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty,step,config_flags,ids,ide, &
   jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   INTEGER :: step
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_u,u,a_v,v,a_u_1,u_1,a_v_1,v_1, &
   a_t_1,t_1,a_ft,ft
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_ww,ww,a_ww_1,ww_1,a_t,t,a_t_ave, &
   t_ave,a_uam,uam,a_vam,vam,a_wwam,wwam
   REAL,DIMENSION(ims:ime,jms:jme) :: a_muu,muu,a_muv,muv,a_mut,mut,msfux,msfuy, &
   msfvx,msfvx_inv,msfvy,msftx,msfty,a_mu_tend,mu_tend
   REAL,DIMENSION(ims:ime,jms:jme) :: a_muave,muave,a_muts,muts,a_mudf,mudf
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mu,mu
   REAL,DIMENSION(kms:kme) :: fnm,fnp,dnw,rdnw
   REAL :: rdx,rdy,dts,epssm
   REAL,DIMENSION(its:ite,kts:kte) :: a_wdtn,wdtn,a_dvdxi,dvdxi
   REAL,DIMENSION(its:ite) :: a_dmdt,dmdt
   INTEGER :: i,j,k,i_start,i_end,j_start,j_end,k_start,k_end
   INTEGER :: i_endu,j_endv
   REAL :: awalls,bwalls,cwalls

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,a_Tmpv8,Tmpv008,a_Tmpv9, &
   Tmpv009,a_Tmpv10,Tmpv010,a_Tmpv11,Tmpv011,a_Tmpv12,Tmpv012,a_Tmpv13,Tmpv013, &
   a_Tmpv14,Tmpv014,a_Tmpv15,Tmpv015,a_Tmpv16,Tmpv016,a_Tmpv17,Tmpv017, &
   a_Tmpv18,Tmpv018,a_Tmpv19,Tmpv019

!PART II: CALCULATIONS OF B. S. TRAJECTORY

   i_start = its
   i_end   = min(ite,ide-1)
   j_start = jts
   j_end   = min(jte,jde-1)
   k_start = kts
   k_end   = kte-1

   IF ( .NOT. config_flags%periodic_x )THEN
   IF ( config_flags%specified .or. config_flags%nested ) then
     i_start = max(its,ids+1)
     i_end   = min(ite,ide-2)
   ENDIF
   ENDIF
 
   IF ( config_flags%specified .or. config_flags%nested ) then
     j_start = max(jts,jds+1)
     j_end   = min(jte,jde-2)
   ENDIF

   i_endu = ite
   j_endv = jte

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

!  a_dvdxi =0.0
   a_wdtn =0.0
   a_dmdt =0.0

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[7]
   DO j =j_end, j_start, -1
   DO k =k_end, 1, -1
   awalls=rdnw(k)
   DO i =i_end, i_start, -1
   a_Tmpv17 =-dts*msfty(i,j)*a_t(i,k,j)
   a_Tmpv15 =awalls*a_Tmpv17
   a_wdtn(i,k+1) =a_wdtn(i,k+1) +a_Tmpv15
   a_wdtn(i,k) =a_wdtn(i,k) -a_Tmpv15
   a_Tmpv13 =.5*msftx(i,j)*a_Tmpv17
   a_Tmpv11 =rdx*a_Tmpv13
   a_u(i,k,j) =a_u(i,k,j) -(t_1(i,k,j) +t_1(i-1,k,j))*a_Tmpv11
   a_Tmpv9 =-u(i,k,j)*a_Tmpv11
   a_t_1(i-1,k,j) =a_t_1(i-1,k,j) +a_Tmpv9
   a_u(i+1,k,j) =a_u(i+1,k,j) +(t_1(i+1,k,j) +t_1(i,k,j))*a_Tmpv11
   a_Tmpv7 =u(i+1,k,j)*a_Tmpv11
   a_t_1(i+1,k,j) =a_t_1(i+1,k,j) +a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv13
   a_v(i,k,j) =a_v(i,k,j) -(t_1(i,k,j) +t_1(i,k,j-1))*a_Tmpv5
   a_Tmpv3 =-v(i,k,j)*a_Tmpv5
   a_t_1(i,k,j-1) =a_t_1(i,k,j-1) +a_Tmpv3
   a_v(i,k,j+1) =a_v(i,k,j+1) +(t_1(i,k,j+1) +t_1(i,k,j))*a_Tmpv5
   a_Tmpv1 =v(i,k,j+1)*a_Tmpv5
   a_t_1(i,k,j+1) =a_t_1(i,k,j+1) +a_Tmpv1
   a_t_1(i,k,j) =a_t_1(i,k,j) +a_Tmpv1 +a_Tmpv3 +a_Tmpv7 +a_Tmpv9
   ENDDO
   ENDDO

   DO k =k_end, 2, -1
   awalls=fnm(k)
   bwalls=fnp(k)
   DO i =i_end, i_start, -1
   a_ww(i,k,j) =a_ww(i,k,j) +(awalls*t_1(i,k,j) +bwalls*t_1(i,k-1,j))*a_wdtn(i,k)
   a_Tmpv1 =ww(i,k,j)*a_wdtn(i,k)
   a_t_1(i,k,j) =a_t_1(i,k,j) +awalls*a_Tmpv1
   a_t_1(i,k-1,j) =a_t_1(i,k-1,j) +bwalls*a_Tmpv1
   ENDDO
   ENDDO

   a_wdtn =0.0
   ENDDO

!LPB[6]
   DO j =j_end, j_start, -1
   DO k =k_end, 1, -1
   DO i =i_end, i_start, -1
   a_ft(i,k,j) =a_ft(i,k,j) +msfty(i,j)*dts*a_t(i,k,j)
   a_t(i,k,j) =a_t(i,k,j) +a_t_ave(i,k,j)
   a_t_ave(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

!LPB[5]
   DO j =j_end, j_start, -1

   DO k =1,k_end
   DO i =i_start,i_end
   a_ww_1(i,k,j) =a_ww_1(i,k,j)-a_ww(i,k,j)
   ENDDO
   ENDDO

   DO k =k_end, 2, -1
   awalls=dnw(k-1)
   DO i =i_end, i_start, -1
   a_Tmpv5 =a_ww(i,k,j)
   a_ww(i,k,j) =0.0
   a_ww(i,k-1,j) =a_ww(i,k-1,j) +a_Tmpv5
   a_Tmpv2 =-awalls*a_Tmpv5/msfty(i,j)
   a_mu_tend(i,j) =a_mu_tend(i,j) +a_Tmpv2
   a_dmdt(i) =a_dmdt(i) +a_Tmpv2
!  a_dvdxi(i,k-1) =a_dvdxi(i,k-1) +a_Tmpv2
   a_dvdxi(i,k-1) =a_Tmpv2
   ENDDO
   ENDDO

   a_dvdxi(i_start:i_end,k_end) =0.

   DO i =i_start,i_end
   a_Tmpv1 =.5*a_muave(i,j)
   a_mu(i,j) =a_mu(i,j) +(1.+epssm)*a_Tmpv1
   a_muave(i,j) =(1.-epssm)*a_Tmpv1
   a_mut(i,j) =a_mut(i,j) +a_muts(i,j)
   a_mu(i,j) =a_mu(i,j) +a_muts(i,j)
   a_muts(i,j) =0.0
   a_Tmpv1 =a_mudf(i,j)
   a_mudf(i,j) =0.0
   a_dmdt(i) =a_dmdt(i) +a_Tmpv1
   a_mu_tend(i,j) =a_mu_tend(i,j) +a_Tmpv1
   a_Tmpv1 =dts*a_mu(i,j)
   a_dmdt(i) =a_dmdt(i) +a_Tmpv1
   a_mu_tend(i,j) =a_mu_tend(i,j) +a_Tmpv1
   a_mu(i,j) =a_mu(i,j) +a_muave(i,j)
   a_muave(i,j) =0.0
   ENDDO

   DO k =k_end, k_start, -1
   awalls=dnw(k)
   DO i =i_end, i_start, -1
!  a_dvdxi(i,k) =a_dvdxi(i,k) +awalls*a_dmdt(i)
!  a_Tmpv17 =msftx(i,j)*msfty(i,j)*a_dvdxi(i,k)
   a_Tmpv17 =msftx(i,j)*msfty(i,j)*(a_dvdxi(i,k)+awalls*a_dmdt(i))
!!!!   a_dvdxi(i,k) =0.0
   a_Tmpv15 =rdx*a_Tmpv17
   a_u(i,k,j) =a_u(i,k,j) -a_Tmpv15
   a_Tmpv12 =-a_Tmpv15/msfuy(i,j)
   a_muu(i,j) =a_muu(i,j) +u_1(i,k,j)*a_Tmpv12
   a_u_1(i,k,j) =a_u_1(i,k,j) +muu(i,j)*a_Tmpv12
   a_u(i+1,k,j) =a_u(i+1,k,j) +a_Tmpv15
   a_Tmpv9 =a_Tmpv15/msfuy(i+1,j)
   a_muu(i+1,j) =a_muu(i+1,j) +u_1(i+1,k,j)*a_Tmpv9
   a_u_1(i+1,k,j) =a_u_1(i+1,k,j) +muu(i+1,j)*a_Tmpv9
   a_Tmpv7 =rdy*a_Tmpv17
   a_v(i,k,j) =a_v(i,k,j) -a_Tmpv7
   a_Tmpv4 =-msfvx_inv(i,j)*a_Tmpv7
   a_muv(i,j) =a_muv(i,j) +v_1(i,k,j)*a_Tmpv4
   a_v_1(i,k,j) =a_v_1(i,k,j) +muv(i,j)*a_Tmpv4
   a_v(i,k,j+1) =a_v(i,k,j+1) +a_Tmpv7
   a_Tmpv1 =msfvx_inv(i,j+1)*a_Tmpv7
   a_muv(i,j+1) =a_muv(i,j+1) +v_1(i,k,j+1)*a_Tmpv1
   a_v_1(i,k,j+1) =a_v_1(i,k,j+1) +muv(i,j+1)*a_Tmpv1
   ENDDO
   ENDDO

   a_dmdt =0.0

   ENDDO

   END SUBROUTINE a_advance_mu_t

   SUBROUTINE a_advance_w(www,w,a_w,rw_tend,a_rw_tend,ww,a_ww,w_save, &
   a_w_save,u,a_u,v,a_v,mu1,a_mu1,mut,a_mut,muave,a_muave,muts,a_muts, &
   t_2ave,a_t_2ave,t_2,a_t_2,t_1,a_t_1,ph,a_ph,ph_1,a_ph_1,phb, &
   ph_tend,a_ph_tend,ht,c2a,a_c2a,cqw,a_cqw,alt,a_alt,alb,a,a_a, &  ! Ning Pan, 2010-07-08
   alpha,a_alpha,gamma,a_gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2, &
   cf3,msftx,msfty,config_flags,top_lid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme, &
   its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   LOGICAL :: top_lid
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_t_2ave,t_2ave,a_w,w,www,a_ph,ph
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_rw_tend,rw_tend,a_ww,ww,a_w_save, &
   w_save,a_u,u,a_v,v,a_t_2,t_2,a_t_1,t_1,a_ph_1,ph_1,phb,a_ph_tend,ph_tend, &
   a_alpha,alpha,a_gamma,gamma,a_a,a,a_c2a,c2a,a_cqw,cqw,alb,a_alt,alt
   REAL,DIMENSION(ims:ime,jms:jme) :: a_mu1,mu1,a_mut,mut,a_muave,muave,a_muts, &
   muts,a_ht,ht,msftx,msfty
   REAL,DIMENSION(kms:kme) :: fnp,fnm,rdnw,rdn,dnw
   REAL :: rdx,rdy,dts,cf1,cf2,cf3,t0,epssm
   REAL,DIMENSION(its:ite) :: a_mut_inv,mut_inv,msft_inv
   REAL,DIMENSION(its:ite,kts:kte) :: a_rhs,rhs,a_wdwn,wdwn
   INTEGER :: i,j,k,i_start,i_end,j_start,j_end,k_start,k_end
   REAL :: a_htop,htop,a_hbot,hbot,hdepth,a_hk,hk
   REAL :: pi,dampmag
   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,a_Tmpv8,Tmpv008,a_Tmpv9, &
   Tmpv009,a_Tmpv10,Tmpv010,a_Tmpv11,Tmpv011,a_Tmpv12,Tmpv012,a_Tmpv13,Tmpv013, &
   a_Tmpv14,Tmpv014,a_Tmpv15,Tmpv015,a_Tmpv16,Tmpv016,a_Tmpv17,Tmpv017, &
   a_Tmpv18,Tmpv018,a_Tmpv19,Tmpv019,a_Tmpv20,Tmpv020,a_Tmpv21,Tmpv021, &
   a_Tmpv22,Tmpv022,a_Tmpv23,Tmpv023,a_Tmpv24,Tmpv024,a_Tmpv25,Tmpv025,a_Tmpv26,Tmpv026
   REAL,DIMENSION(ims:ime) :: Tmpv201
   REAL,DIMENSION(ims:ime) :: Tmpv202
   REAL,DIMENSION(ims:ime) :: Tmpv203
   REAL,DIMENSION(ims:ime) :: Tmpv204
   REAL,DIMENSION(ims:ime) :: Tmpv205
   REAL,DIMENSION(ims:ime) :: Tmpv206
   REAL,DIMENSION(ims:ime) :: Tmpv207
   REAL,DIMENSION(ims:ime) :: Tmpv208
   REAL,DIMENSION(ims:ime) :: Tmpv2010
   REAL,DIMENSION(ims:ime) :: Tmpv2011
   REAL,DIMENSION(ims:ime) :: Tmpv2012
   REAL,DIMENSION(1:3,its:min(ite,ide-1),kte-1) :: Tmpv305
   REAL,DIMENSION(its:min(ite,ide-1),2:kte) :: Tmpv308
   REAL,DIMENSION(0:3,its:min(ite,ide-1),2:kte-1) :: TmpvA301
   REAL,DIMENSION(1:2,its:min(ite,ide-1),2:kte) :: Tmpv3017
   REAL,DIMENSION(its:min(ite,ide-1),2:kte) :: Tmpv3019

   REAL,DIMENSION(ims:ime) :: pwalls,qwalls,rwalls
   REAL :: gwalls,cwalls,awalls,bwalls,dwalls,ewalls,hwalls

!PART II: CALCULATIONS OF B. S. TRAJECTORY

      i_start = its
      i_end   = min(ite,ide-1)
      j_start = jts
      j_end   = min(jte,jde-1)
      k_start = kts
      k_end   = kte-1

      IF ( .NOT. config_flags%periodic_x )THEN
      IF ( config_flags%specified .or. config_flags%nested ) then
         i_start = max(its,ids+1)
         i_end   = min(ite,ide-2)
      ENDIF
      ENDIF

      IF ( config_flags%specified .or. config_flags%nested ) then
         j_start = max(jts,jds+1)
         j_end   = min(jte,jde-2)
      ENDIF

      pi = 2.*atan(1.)
      dampmag = dts*config_flags%dampcoef
      hdepth=config_flags%zdamp

      DO i=i_start, i_end
        rhs(i,1) = 0.
      ENDDO

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   Do K1_ADJ =kts, kte
   Do K0_ADJ =its, ite
   a_wdwn(K0_ADJ,K1_ADJ) =0.0
   End Do
   End Do

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[6]
   gwalls=.5*dts*g*(1.+epssm)

   DO j =j_end, j_start, -1

   DO i =ims,ime
     pwalls(i) =msfty(i,j)*gwalls/muts(i,j)
     qwalls(i) =pwalls(i)/muts(i,j)
   ENDDO

   DO i =i_start, i_end
   mut_inv(i) =1./mut(i,j)
   msft_inv(i) =1./msfty(i,j)
   ENDDO

   bwalls=dts*.5*g*(1.-epssm)
   DO k =1, k_end
   awalls=.5*rdnw(k)
   DO i =i_start, i_end
   Tmpv001 =.5*((1.+epssm)*t_2(i,k,j) +(1.-epssm)*t_2ave(i,k,j)) +muave(i,j)*t0
   Tmpv002 =muts(i,j)*(t0 +t_1(i,k,j))
   Tmpv003 =awalls*(ww(i,k+1,j)+ww(i,k,j))
   Tmpv004 =ph_1(i,k+1,j)-ph_1(i,k,j)+phb(i,k+1,j)-phb(i,k,j)

   Tmpv305(1,i,k) =Tmpv004
   Tmpv305(2,i,k) =Tmpv003
   Tmpv305(3,i,k) =Tmpv002

   t_2ave(i,k,j) =Tmpv001/Tmpv002
   wdwn(i,k+1) =Tmpv003*Tmpv004
   rhs(i,k+1) =dts*ph_tend(i,k+1,j) +bwalls*w(i,k+1,j)
   ENDDO
   ENDDO

   DO k =2, k_end
   awalls=dts*fnm(k)
   bwalls=dts*fnp(k)
   DO i =i_start, i_end
   rhs(i,k) =rhs(i,k)-awalls*wdwn(i,k+1) -bwalls*wdwn(i,k)
   ENDDO
   ENDDO

   IF(top_lid) THEN
   rhs(i_start:i_end,k_end+1) =0.
   DO k =2, k_end
   DO i =i_start, i_end
   bwalls =msfty(i,j)*rhs(i,k)
   Tmpv308(i,k) =bwalls
   rhs(i,k) =ph(i,k,j) +bwalls*mut_inv(i)
   ENDDO
   ENDDO
   ELSE
   DO k =2, k_end+1
   DO i =i_start, i_end
   bwalls =msfty(i,j)*rhs(i,k)
   Tmpv308(i,k) =bwalls
   rhs(i,k) =ph(i,k,j) +bwalls*mut_inv(i)
   ENDDO
   ENDDO
   END IF

   DO i =i_start, i_end
   Tmpv001 =ht(i,j+1) -ht(i,j)
   Tmpv002 =cf1*v(i,1,j+1) +cf2*v(i,2,j+1)
   Tmpv003 =Tmpv002 +cf3*v(i,3,j+1)
   Tmpv201(i) =Tmpv001
   Tmpv202(i) =Tmpv003
   Tmpv004 =Tmpv001*Tmpv003
   Tmpv005 =ht(i,j) -ht(i,j-1)
   Tmpv006 =cf1*v(i,1,j) +cf2*v(i,2,j)
   Tmpv007 =Tmpv006 +cf3*v(i,3,j)
   Tmpv203(i) =Tmpv005
   Tmpv204(i) =Tmpv007
   Tmpv008 =Tmpv203(i)*Tmpv204(i)
   Tmpv009 =Tmpv004 +Tmpv008
   Tmpv010 =msfty(i,j)*.5*rdy*Tmpv009
   Tmpv011 =ht(i+1,j) -ht(i,j)
   Tmpv012 =cf1*u(i+1,1,j) +cf2*u(i+1,2,j)
   Tmpv013 =Tmpv012 +cf3*u(i+1,3,j)
   Tmpv205(i) =Tmpv011
   Tmpv206(i) =Tmpv013
   Tmpv014 =Tmpv205(i)*Tmpv206(i)
   Tmpv015 =ht(i,j) -ht(i-1,j)
   Tmpv016 =cf1*u(i,1,j) +cf2*u(i,2,j)
   Tmpv017 =Tmpv016 +cf3*u(i,3,j)
   Tmpv207(i) =Tmpv015
   Tmpv208(i) =Tmpv017
   Tmpv018 =Tmpv207(i)*Tmpv208(i)
   Tmpv019 =Tmpv014 +Tmpv018
   Tmpv020 =msftx(i,j)*.5*rdx*Tmpv019
   Tmpv021 =Tmpv010 +Tmpv020
   w(i,1,j) =Tmpv021

   ENDDO

   DO k =2, k_end
   cwalls=.5*dts*g*rdn(k)
   ewalls=rdn(k)
   dwalls=rdnw(k)
   hwalls=rdnw(k-1)
   DO i =i_start, i_end
   Tmpv001 =w(i,k,j) +dts*rw_tend(i,k,j)
   Tmpv002 =rhs(i,k+1) -rhs(i,k)
   Tmpv008 =rhs(i,k) -rhs(i,k-1)
   Tmpv003 =(1.+epssm)*Tmpv002
   Tmpv004 =ph(i,k+1,j) -ph(i,k,j)
   Tmpv010 =ph(i,k,j) -ph(i,k-1,j)
   Tmpv005 =(1.-epssm)*Tmpv004
   Tmpv006 =dwalls*(Tmpv003 +Tmpv005)
   Tmpv007 =c2a(i,k,j)*Tmpv006
   Tmpv012 =((1.+epssm)*Tmpv008+(1.-epssm)*Tmpv010)*hwalls
   Tmpv013 =c2a(i,k-1,j)*Tmpv012
   Tmpv014 =cwalls*(Tmpv007 -Tmpv013)
   Tmpv015 =msft_inv(i)*mut_inv(i)*Tmpv014
   TmpvA301(0,i,k) =Tmpv006
   TmpvA301(1,i,k) =Tmpv012
   TmpvA301(2,i,k) =Tmpv014
   TmpvA301(3,i,k) =Tmpv015
   Tmpv022 =c2a(i,k,j)*alt(i,k,j)*t_2ave(i,k,j) -c2a(i,k-1,j)*alt(i,k-1,j)*t_2ave(i,k-1,j)
   w(i,k,j) =Tmpv001 +cqw(i,k,j)*Tmpv015 +dts*g*msft_inv(i)*(ewalls*Tmpv022-muave(i,j))
   ENDDO
   ENDDO

   K =k_end+1

   DO i =i_start, i_end
   Tmpv001 =w(i,k,j) +dts*rw_tend(i,k,j)
   Tmpv002 =-dts*g*mut_inv(i)*rdnw(k-1)*rdnw(k-1)*c2a(i,k-1,j)
   Tmpv003 =rhs(i,k) -rhs(i,k-1)
   Tmpv004 =(1.+epssm)*Tmpv003
   Tmpv005 =ph(i,k,j) -ph(i,k-1,j)
   Tmpv006 =(1.-epssm)*Tmpv005
   Tmpv007 =Tmpv004 +Tmpv006
   Tmpv2010(i) =Tmpv002
   Tmpv2011(i) =Tmpv007
   Tmpv008 =Tmpv2010(i)*Tmpv2011(i)
   Tmpv009 =2.*rdnw(k-1)*c2a(i,k-1,j)*alt(i,k-1,j)
   Tmpv2012(i) =Tmpv009
   Tmpv011 =Tmpv009*t_2ave(i,k-1,j)+muave(i,j)
   w(i,k,j) =Tmpv001 +msft_inv(i)*(Tmpv008-dts*g*Tmpv011)

   IF(top_lid) THEN
   w(i,k,j) =0.
   END IF
   ENDDO

   DO k =2, k_end+1
   DO i =i_start, i_end
   Tmpv002 =w(i,k,j)-a(i,k,j)*w(i,k-1,j)
   Tmpv3017(1,i,k) =Tmpv002
   Tmpv3017(2,i,k) =w(i,k-1,j)
   w(i,k,j) =Tmpv002*alpha(i,k,j)
   ENDDO
   ENDDO

   DO k =k_end, 2, -1
   DO i =i_start, i_end
   Tmpv3019(i,k) =w(i,k+1,j)
   w(i,k,j) =w(i,k,j)-gamma(i,k,j)*w(i,k+1,j)
   ENDDO
   ENDDO

   DO k =2, k_end+1, 1
   DO i =i_end, i_start, -1
   a_rhs(i,k)  =a_ph(i,k,j)
   a_w(i,k,j)  =a_w(i,k,j)  +pwalls(i)*a_ph(i,k,j)
   a_muts(i,j) =a_muts(i,j) -qwalls(i)*www(i,k,j)*a_ph(i,k,j)
   ENDDO
   ENDDO

   a_ph(i_start:i_end,2:(k_end+1),j) =0.0

   IF(config_flags%damp_opt .eq. 3) THEN
   bwalls =pi/g/hdepth
   DO k =2, k_end+1
   DO i =i_end, i_start, -1
   htop =(ph_1(i,k_end+1,j) +phb(i,k_end+1,j))/g
   hk =(ph_1(i,k,j) +phb(i,k,j))/g
   hbot =htop -hdepth

   IF(hk .ge. hbot) THEN
   Tmpv003 =pi*(hk-hbot)/hdepth
   Tmpv004 =sin(Tmpv003)
   Tmpv005 =dampmag*Tmpv004
   Tmpv006 =pi*(hk-hbot)/hdepth
   Tmpv007 =sin(Tmpv006)
   Tmpv008 =Tmpv005*Tmpv007
   Tmpv009 =Tmpv008*mut(i,j)
   Tmpv001 =w(i,k,j)-Tmpv009*w_save(i,k,j)
   Tmpv002 =cos(Tmpv006)*Tmpv005+cos(Tmpv003)*dampmag*Tmpv007

   a_Tmpv3 =a_w(i,k,j)/(1.+Tmpv008)
   a_w(i,k,j) =a_Tmpv3
   a_Tmpv1 =-w_save(i,k,j)*a_Tmpv3
   a_w_save(i,k,j) =a_w_save(i,k,j) -Tmpv009*a_Tmpv3
   a_mut(i,j) =a_mut(i,j) +Tmpv008*a_Tmpv1
   cwalls =bwalls*(mut(i,j)*a_Tmpv1-Tmpv001*a_Tmpv3/(1.+Tmpv008))*Tmpv002
   a_ph_1(i,k,j) =a_ph_1(i,k,j) +cwalls
   a_ph_1(i,k_end+1,j) =a_ph_1(i,k_end+1,j) -cwalls
   ENDIF
   ENDDO
   ENDDO

   ENDIF

   DO k =2, k_end, 1
   DO i =i_end, i_start, -1
   a_gamma(i,k,j) =a_gamma(i,k,j) -Tmpv3019(i,k)*a_w(i,k,j)
   a_w(i,k+1,j) =a_w(i,k+1,j) -gamma(i,k,j)*a_w(i,k,j)
   ENDDO
   ENDDO

   DO k =k_end+1, 2, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_w(i,k,j)
   a_Tmpv2 =alpha(i,k,j)*a_Tmpv3
   a_alpha(i,k,j) =a_alpha(i,k,j) +Tmpv3017(1,i,k)*a_Tmpv3
   a_a(i,k,j) =a_a(i,k,j) -Tmpv3017(2,i,k)*a_Tmpv2
   a_w(i,k,j) =a_Tmpv2
   a_w(i,k-1,j) =a_w(i,k-1,j) -a(i,k,j)*a_Tmpv2
   ENDDO
   ENDDO

   K=k_end+1
   DO i =i_end, i_start, -1

   IF(top_lid) THEN
   a_w(i,k,j) =0.0
   END IF

   a_Tmpv15 =a_w(i,k,j)
   a_w(i,k,j) =0.0
   a_Tmpv1 =a_Tmpv15
   a_Tmpv14 =a_Tmpv15
   a_Tmpv13 =msft_inv(i)*a_Tmpv14
   a_Tmpv8 =a_Tmpv13
   a_Tmpv12 =-a_Tmpv13
   a_Tmpv11 =dts*g*a_Tmpv12
   a_Tmpv10 =a_Tmpv11  
   a_muave(i,j) =a_muave(i,j) +a_Tmpv11
   a_Tmpv9 =2.*rdnw(k-1)*t_2ave(i,k-1,j)*a_Tmpv10
   a_t_2ave(i,k-1,j) =a_t_2ave(i,k-1,j) +Tmpv2012(i)*a_Tmpv10
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) +alt(i,k-1,j)*a_Tmpv9
   a_alt(i,k-1,j) =a_alt(i,k-1,j) +c2a(i,k-1,j)*a_Tmpv9
   a_Tmpv2 =Tmpv2011(i)*a_Tmpv8
   a_Tmpv7 =Tmpv2010(i)*a_Tmpv8
   a_Tmpv4 =a_Tmpv7
   a_Tmpv6 =a_Tmpv7
   a_Tmpv5 =(1.-epssm)*a_Tmpv6
   a_ph(i,k,j) =a_ph(i,k,j) +a_Tmpv5
   a_ph(i,k-1,j) =a_ph(i,k-1,j) -a_Tmpv5
   a_Tmpv3 =(1.+epssm)*a_Tmpv4
   a_rhs(i,k) =a_rhs(i,k) +a_Tmpv3
   a_rhs(i,k-1) =a_rhs(i,k-1) -a_Tmpv3
   a_mut_inv(i) =-.5*dts*g*rdnw(k-1)*rdnw(k-1)*2.*c2a(i,k-1,j)*a_Tmpv2
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) -.5*dts*g*mut_inv(i)*rdnw(k-1)*rdnw(k-1)*2.*a_Tmpv2
   a_w(i,k,j) =a_w(i,k,j) +a_Tmpv1
   a_rw_tend(i,k,j) =a_rw_tend(i,k,j) +dts*a_Tmpv1
   ENDDO

   DO k =k_end, 2, -1
   cwalls=.5*dts*g*rdn(k)
   awalls=rdn(k)
   bwalls=rdnw(k)
   hwalls=rdnw(k-1)
   DO i =i_end, i_start, -1
   a_Tmpv24 =dts*g*msft_inv(i)*a_w(i,k,j)
   a_muave(i,j) =a_muave(i,j) -a_Tmpv24
   a_Tmpv22 =awalls*a_Tmpv24
   a_Tmpv20 =-t_2ave(i,k-1,j)*a_Tmpv22
   a_t_2ave(i,k-1,j) =a_t_2ave(i,k-1,j) -c2a(i,k-1,j)*alt(i,k-1,j)*a_Tmpv22
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) +alt(i,k-1,j)*a_Tmpv20
   a_alt(i,k-1,j) =a_alt(i,k-1,j) +c2a(i,k-1,j)*a_Tmpv20
   a_Tmpv18 =t_2ave(i,k,j)*a_Tmpv22
   a_t_2ave(i,k,j) =a_t_2ave(i,k,j) +c2a(i,k,j)*alt(i,k,j)*a_Tmpv22
   a_c2a(i,k,j) =a_c2a(i,k,j) +alt(i,k,j)*a_Tmpv18
   a_alt(i,k,j) =a_alt(i,k,j) +c2a(i,k,j)*a_Tmpv18
   a_cqw(i,k,j) =a_cqw(i,k,j) +TmpvA301(3,i,k)*a_w(i,k,j)
   a_Tmpv15 =msft_inv(i)*cqw(i,k,j)*a_w(i,k,j)
   a_mut_inv(i) =a_mut_inv(i) +TmpvA301(2,i,k)*a_Tmpv15
   a_Tmpv14 =cwalls*mut_inv(i)*a_Tmpv15
   a_c2a(i,k-1,j) =a_c2a(i,k-1,j) -TmpvA301(1,i,k)*a_Tmpv14
   a_c2a(i,k,j) =a_c2a(i,k,j) +TmpvA301(0,i,k)*a_Tmpv14
   a_Tmpv12 =-c2a(i,k-1,j)*hwalls*a_Tmpv14
   a_Tmpv10 =(1.-epssm)*a_Tmpv12
   a_ph(i,k,j) =a_ph(i,k,j) +a_Tmpv10
   a_ph(i,k-1,j) =a_ph(i,k-1,j) -a_Tmpv10
   a_Tmpv8 =(1.+epssm)*a_Tmpv12
   a_rhs(i,k) =a_rhs(i,k) +a_Tmpv8
   a_rhs(i,k-1) =a_rhs(i,k-1) -a_Tmpv8
   a_Tmpv6 =c2a(i,k,j)*bwalls*a_Tmpv14
   a_Tmpv4 =(1.-epssm)*a_Tmpv6
   a_ph(i,k+1,j) =a_ph(i,k+1,j) +a_Tmpv4
   a_ph(i,k,j) =a_ph(i,k,j) -a_Tmpv4
   a_Tmpv2 =(1.+epssm)*a_Tmpv6
   a_rhs(i,k+1) =a_rhs(i,k+1) +a_Tmpv2
   a_rhs(i,k) =a_rhs(i,k) -a_Tmpv2
   ENDDO
   ENDDO

   a_rw_tend(i_start:i_end,2:k_end,j) =a_rw_tend(i_start:i_end,2:k_end,j) &
                                      +dts*a_w(i_start:i_end,2:k_end,j)

   DO i =i_end, i_start, -1
   a_Tmpv21 =a_w(i,1,j)
   a_w(i,1,j) =0.0
   a_Tmpv19 =msftx(i,j)*.5*rdx*a_Tmpv21
   a_Tmpv15 =Tmpv208(i)*a_Tmpv19
   a_Tmpv17 =Tmpv207(i)*a_Tmpv19
   a_u(i,3,j) =a_u(i,3,j) +cf3*a_Tmpv17
   a_u(i,1,j) =a_u(i,1,j) +cf1*a_Tmpv17
   a_u(i,2,j) =a_u(i,2,j) +cf2*a_Tmpv17
   a_Tmpv11 =Tmpv206(i)*a_Tmpv19
   a_Tmpv13 =Tmpv205(i)*a_Tmpv19
   a_u(i+1,3,j) =a_u(i+1,3,j) +cf3*a_Tmpv13
   a_u(i+1,1,j) =a_u(i+1,1,j) +cf1*a_Tmpv13
   a_u(i+1,2,j) =a_u(i+1,2,j) +cf2*a_Tmpv13
   a_Tmpv9 =msfty(i,j)*.5*rdy*a_Tmpv21
   a_Tmpv5 =Tmpv204(i)*a_Tmpv9
   a_Tmpv7 =Tmpv203(i)*a_Tmpv9
   a_v(i,3,j) =a_v(i,3,j) +cf3*a_Tmpv7
   a_v(i,1,j) =a_v(i,1,j) +cf1*a_Tmpv7
   a_v(i,2,j) =a_v(i,2,j) +cf2*a_Tmpv7
   a_Tmpv1 =Tmpv202(i)*a_Tmpv9
   a_Tmpv3 =Tmpv201(i)*a_Tmpv9
   a_v(i,3,j+1) =a_v(i,3,j+1) +cf3*a_Tmpv3
   a_v(i,1,j+1) =a_v(i,1,j+1) +cf1*a_Tmpv3
   a_v(i,2,j+1) =a_v(i,2,j+1) +cf2*a_Tmpv3
   ENDDO

   IF(top_lid) THEN
   a_rhs(i_start:i_end,k_end+1) =0.
   DO k =k_end, 2, -1
   DO i =i_end, i_start, -1
   a_ph(i,k,j) =a_ph(i,k,j) +a_rhs(i,k)
   a_mut_inv(i) =a_mut_inv(i) +Tmpv308(i,k)*a_rhs(i,k)
   a_rhs(i,k) =msfty(i,j)*mut_inv(i)*a_rhs(i,k)
   ENDDO
   ENDDO
   ELSE
   DO k =k_end+1, 2, -1
   DO i =i_end, i_start, -1
   a_ph(i,k,j) =a_ph(i,k,j) +a_rhs(i,k)
   a_mut_inv(i) =a_mut_inv(i) +Tmpv308(i,k)*a_rhs(i,k)
   a_rhs(i,k) =msfty(i,j)*mut_inv(i)*a_rhs(i,k)
   ENDDO
   ENDDO
   END IF

   DO k =k_end, 2, -1
   cwalls=fnm(k)*dts
   hwalls=fnp(k)*dts
   DO i =i_start,i_end
   a_wdwn(i,k+1) =a_wdwn(i,k+1) -cwalls*a_rhs(i,k)
   a_wdwn(i,k) =a_wdwn(i,k) -hwalls*a_rhs(i,k)
   ENDDO
   ENDDO

   hwalls=.5*(1.-epssm)
   ewalls=.5*(1.+epssm)
   bwalls=hwalls*g*dts

   DO k =k_end, 1, -1
   awalls=.5*rdnw(k)
   rwalls(i_start:i_end) =a_wdwn(i_start:i_end,k+1)
   a_wdwn(i_start:i_end,k+1) =0.0
   DO i =i_end, i_start, -1
   a_ph_tend(i,k+1,j) =a_ph_tend(i,k+1,j) +dts*a_rhs(i,k+1)
   a_w(i,k+1,j) =a_w(i,k+1,j) +bwalls*a_rhs(i,k+1)
   a_Tmpv3 =Tmpv305(1,i,k)*rwalls(i)
   a_Tmpv6 =Tmpv305(2,i,k)*rwalls(i)
   a_ph_1(i,k+1,j) =a_ph_1(i,k+1,j) +a_Tmpv6
   a_ph_1(i,k,j) =a_ph_1(i,k,j) -a_Tmpv6
   a_ww(i,k+1,j) =a_ww(i,k+1,j) +awalls*a_Tmpv3
   a_ww(i,k,j) =a_ww(i,k,j) +awalls*a_Tmpv3

   a_Tmpv1 =a_t_2ave(i,k,j)/Tmpv305(3,i,k)
   a_Tmpv2 =-t_2ave(i,k,j)*a_Tmpv1
   a_muts(i,j) =a_muts(i,j) +(t0 +t_1(i,k,j))*a_Tmpv2
   a_t_1(i,k,j) =a_t_1(i,k,j) +muts(i,j)*a_Tmpv2
   a_muave(i,j) =a_muave(i,j) +t0*a_Tmpv1

   a_t_2(i,k,j) =a_t_2(i,k,j) +ewalls*a_Tmpv1
   a_t_2ave(i,k,j) =hwalls*a_Tmpv1
   ENDDO
   ENDDO

   DO i =i_start,i_end
   a_mut(i,j) =a_mut(i,j) -a_mut_inv(i)/(mut(i,j)*mut(i,j))
   ENDDO

   ENDDO

   END SUBROUTINE a_advance_w

   SUBROUTINE a_sumflux(ru,a_ru,rv,a_rv,ww,a_ww,u_lin,a_u_lin,v_lin, &
   a_v_lin,ww_lin,a_ww_lin,muu,a_muu,muv,a_muv,ru_m,a_ru_m,rv_m,a_rv_m, &
   ww_m,a_ww_m,epssm,msfux,msfuy,msfvx,msfvx_inv,msfvy,iteration,number_of_small_timesteps, &
   ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   INTEGER :: number_of_small_timesteps
   INTEGER :: iteration
   INTEGER :: ids,ide,jds,jde,kds,kde
   INTEGER :: ims,ime,jms,jme,kms,kme
   INTEGER :: its,ite,jts,jte,kts,kte
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_ru,ru,a_rv,rv,a_ww,ww,a_u_lin, &
   u_lin,a_v_lin,v_lin,a_ww_lin,ww_lin
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_ru_m,ru_m,a_rv_m,rv_m,a_ww_m,ww_m
   REAL,DIMENSION(ims:ime,jms:jme) :: a_muu,muu,a_muv,muv,msfux,msfuy,msfvx,msfvy,msfvx_inv
   INTEGER :: mini,minj,mink
   REAL :: epssm
   INTEGER :: i,j,k

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003

!PART II: CALCULATIONS OF B. S. TRAJECTORY

   mini = min(ide-1,ite)
   minj = min(jde-1,jte)
   mink = min(kde-1,kte)

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[11]

   IF(iteration == number_of_small_timesteps) THEN

   IF( kte .GT. mink) THEN

   DO j =minj, jts, -1
   DO k =kte, mink+1, -1
   DO i =mini, its, -1
   a_ww_m(i,k,j) =a_ww_m(i,k,j)/number_of_small_timesteps
   a_ww_lin(i,k,j) =a_ww_lin(i,k,j) +a_ww_m(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   END IF

   IF(jte .GT. minj) THEN

   DO j =jte, minj+1, -1
   DO k =mink, kts, -1
   DO i =mini, its, -1
   a_Tmpv3 =a_rv_m(i,k,j)
   a_rv_m(i,k,j) =a_Tmpv3/number_of_small_timesteps
   a_Tmpv1 =msfvx_inv(i,j)*a_Tmpv3
   a_muv(i,j) =a_muv(i,j) +v_lin(i,k,j)*a_Tmpv1
   a_v_lin(i,k,j) =a_v_lin(i,k,j) +muv(i,j)*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   END IF

   IF(ite .GT. mini) THEN

   DO j =minj, jts, -1
   DO k =mink, kts, -1
   DO i =ite, mini+1, -1
   a_Tmpv3 =a_ru_m(i,k,j)
   a_ru_m(i,k,j) =a_Tmpv3/number_of_small_timesteps
   a_Tmpv1 =a_Tmpv3/msfuy(i,j)
   a_muu(i,j) =a_muu(i,j) +u_lin(i,k,j)*a_Tmpv1
   a_u_lin(i,k,j) =a_u_lin(i,k,j) +muu(i,j)*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   END IF
   DO j =minj, jts, -1
   DO k =mink, kts, -1
   DO i =mini, its, -1
   a_Tmpv1 =a_ww_m(i,k,j)
   a_ww_m(i,k,j) =a_Tmpv1/number_of_small_timesteps
   a_ww_lin(i,k,j) =a_ww_lin(i,k,j) +a_Tmpv1
   a_Tmpv3 =a_rv_m(i,k,j)
   a_rv_m(i,k,j) =a_Tmpv3/number_of_small_timesteps
   a_Tmpv1 =msfvx_inv(i,j)*a_Tmpv3
   a_muv(i,j) =a_muv(i,j) +v_lin(i,k,j)*a_Tmpv1
   a_v_lin(i,k,j) =a_v_lin(i,k,j) +muv(i,j)*a_Tmpv1
   a_Tmpv3 =a_ru_m(i,k,j)
   a_ru_m(i,k,j) =a_Tmpv3/number_of_small_timesteps
   a_Tmpv1 =a_Tmpv3/msfuy(i,j)
   a_muu(i,j) =a_muu(i,j) +u_lin(i,k,j)*a_Tmpv1
   a_u_lin(i,k,j) =a_u_lin(i,k,j) +muu(i,j)*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   ENDIF

   IF( kte .GT. mink) THEN

   DO j =jts,minj
   DO k =mink+1,kte
   DO i =its,mini
   a_ww(i,k,j) =a_ww(i,k,j) +a_ww_m(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   END IF

!LPB[8]

   IF(jte .GT. minj) THEN

   DO j =jte, minj+1, -1
   DO k =mink, kts, -1
   DO i =mini, its, -1
   a_rv(i,k,j) =a_rv(i,k,j) +a_rv_m(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   END IF

!LPB[6]

   IF(ite .GT. mini) THEN

   DO j =jts,minj
   DO k =kts,mink
   DO i =mini+1,ite 
   a_ru(i,k,j) =a_ru(i,k,j) +a_ru_m(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   END IF

!LPB[3]
   DO j =jts,minj
   DO k =kts,mink
   DO i =its,mini
   a_ww(i,k,j) =a_ww(i,k,j) +a_ww_m(i,k,j)
   a_rv(i,k,j) =a_rv(i,k,j) +a_rv_m(i,k,j)
   a_ru(i,k,j) =a_ru(i,k,j) +a_ru_m(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   IF(iteration == 1 ) THEN

   DO j =jts,jte
   DO k =kts,kte
   DO i =its,ite
   a_ww_m(i,k,j) =0.0
   a_rv_m(i,k,j) =0.0
   a_ru_m(i,k,j) =0.0
   ENDDO
   ENDDO
   ENDDO

   ENDIF

!LPB[0]

   END SUBROUTINE a_sumflux

   SUBROUTINE a_init_module_small_step

   END SUBROUTINE a_init_module_small_step

END MODULE a_module_small_step_em

